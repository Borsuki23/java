import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.*;

public class RockPaperScissorsBot extends TelegramLongPollingBot {

    enum State { WAITING, PLAYING }

    private static class Player {
        Long chatId;
        String move; // "–∫–∞–º—ñ–Ω—å", "–Ω–æ–∂–∏—Ü—ñ", "–ø–∞–ø—ñ—Ä"

        Player(Long chatId) {
            this.chatId = chatId;
        }
    }

    private final List<Player> players = new ArrayList<>();
    private final Map<Long, Player> playerMap = new HashMap<>();
    private State gameState = State.WAITING;

    @Override
    public String getBotUsername() {
        return "@boberchik_bot"; // –∑–∞–º—ñ–Ω–∏—Ç–∏
    }

    @Override
    public String getBotToken() {
        return "5579061130:AAEiIBroucLkh0b6xarE52m81zH9XsyA_Hk"; // –∑–∞–º—ñ–Ω–∏—Ç–∏
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText().toLowerCase();

        if (text.equals("/join")) {
            if (playerMap.containsKey(chatId)) {
                send(chatId, "–¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ!");
                return;
            }

            if (players.size() >= 2) {
                send(chatId, "–ì—Ä–∞ –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.");
                return;
            }

            Player newPlayer = new Player(chatId);
            players.add(newPlayer);
            playerMap.put(chatId, newPlayer);
            send(chatId, "‚úÖ –¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!");

            if (players.size() == 2) {
                gameState = State.PLAYING;
                for (Player p : players) {
                    send(p.chatId, "üéÆ –ü–æ—á–∏–Ω–∞—î–º–æ –≥—Ä—É! –ù–∞–ø–∏—à–∏: –∫–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ –∞–±–æ –ø–∞–ø—ñ—Ä.");
                }
            }
            return;
        }

        if (gameState == State.PLAYING && playerMap.containsKey(chatId)) {
            Player player = playerMap.get(chatId);

            if (player.move != null) {
                send(chatId, "–¢–∏ –≤–∂–µ –∑—Ä–æ–±–∏–≤ —Ö—ñ–¥. –û—á—ñ–∫—É–π —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è.");
                return;
            }

            if (!List.of("–∫–∞–º—ñ–Ω—å", "–Ω–æ–∂–∏—Ü—ñ", "–ø–∞–ø—ñ—Ä").contains(text)) {
                send(chatId, "‚ùå –í–≤–µ–¥–∏ —Ç—ñ–ª—å–∫–∏: –∫–∞–º—ñ–Ω—å, –Ω–æ–∂–∏—Ü—ñ –∞–±–æ –ø–∞–ø—ñ—Ä.");
                return;
            }

            player.move = text;
            send(chatId, "‚úÖ –•—ñ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ!");

            if (players.get(0).move != null && players.get(1).move != null) {
                showResult();
                resetGame();
            }
        }
    }

    private void showResult() {
        Player p1 = players.get(0);
        Player p2 = players.get(1);

        String move1 = p1.move;
        String move2 = p2.move;

        String result;
        if (move1.equals(move2)) {
            result = "ü§ù –ù—ñ—á–∏—è!";
        } else if (
                (move1.equals("–∫–∞–º—ñ–Ω—å") && move2.equals("–Ω–æ–∂–∏—Ü—ñ")) ||
                        (move1.equals("–Ω–æ–∂–∏—Ü—ñ") && move2.equals("–ø–∞–ø—ñ—Ä")) ||
                        (move1.equals("–ø–∞–ø—ñ—Ä") && move2.equals("–∫–∞–º—ñ–Ω—å"))
        ) {
            result = "üéâ –ì—Ä–∞–≤–µ—Ü—å 1 –ø–µ—Ä–µ–º—ñ–≥!";
        } else {
            result = "üéâ –ì—Ä–∞–≤–µ—Ü—å 2 –ø–µ—Ä–µ–º—ñ–≥!";
        }

        send(p1.chatId, String.format("–¢–∏: %s, —Å—É–ø–µ—Ä–Ω–∏–∫: %s\n%s", move1, move2, result));
        send(p2.chatId, String.format("–¢–∏: %s, —Å—É–ø–µ—Ä–Ω–∏–∫: %s\n%s", move2, move1, result));
    }

    private void resetGame() {
        players.clear();
        playerMap.clear();
        gameState = State.WAITING;
    }

    private void send(Long chatId, String text) {
        try {
            execute(new SendMessage(chatId.toString(), text));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        try {
            TelegramBotsApi api = new TelegramBotsApi(DefaultBotSession.class);
            api.registerBot(new RockPaperScissorsBot());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}

